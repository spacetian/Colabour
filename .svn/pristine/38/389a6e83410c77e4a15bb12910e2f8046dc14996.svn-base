package yayu.web.config;

import javax.servlet.MultipartConfigElement;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration.Dynamic;

import org.springframework.core.annotation.Order;
import org.springframework.web.WebApplicationInitializer;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.servlet.DispatcherServlet;
import org.springframework.web.util.Log4jConfigListener;

import yayu.core.context.ApplicationContextWrapper;
import yayu.core.plugin.PluginManagerInitializer;
//@ComponentScan(basePackages = "com.yayu.repository.dashbord,com.yayu.service")
@Order(1)
public class WebApplicationStartup implements  WebApplicationInitializer{

	private static final String SERVLET_NAME = "Spring-mvc";
	private static final long MAX_FILE_UPLOAD_SIZE = 1024 * 1024 * 5; // 5 Mb
	private static final int FILE_SIZE_THRESHOLD = 1024 * 1024; // After 1Mb
	private static final long MAX_REQUEST_SIZE = -1L; // No request size limit
	 /**
	   * 服务器启动调用此方法，在这里可以做配置 作用与web.xml相同
	   */
	public void onStartup(ServletContext servletContext) throws ServletException {
		
		//Log4jConfigListener
/*		servletContext.setInitParameter("log4jConfigLocation", "classpath:config/properties/log4j.properties");
		servletContext.addListener(Log4jConfigListener.class);*/
		
		//OpenSessionInViewFilter SEE:http://blog.csdn.net/sunsea08/article/details/4545186
		/*OpenSessionInViewFilter hibernateSessionInViewFilter = new OpenSessionInViewFilter();
		FilterRegistration.Dynamic filterRegistration = servletContext.addFilter(
				"hibernateFilter", hibernateSessionInViewFilter);
		filterRegistration.addMappingForUrlPatterns(
				EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), false, "/");*/
		
		// 注册springMvc的servlet
//		this.addServlet(servletContext);
//	    
//	    ApplicationContextWrapper.init(servletContext);
//	    
//		//插件初始化
//		servletContext.setInitParameter("pf4j.pluginsDir", ApplicationContextWrapper.getServletContext().getRealPath("WEB-INF/classes/plugins"));
//		servletContext.addListener(PluginManagerInitializer.class);
		
	}
/*	 *//**
	   * 注册Spring servlet
	   * 
	   * @param servletContext
	   *//*
	  private void addServlet(ServletContext servletContext) {
		  
	    // 构建一个application context
	    AnnotationConfigWebApplicationContext webContext = createWebContext(SpringMVC.class, ViewConfiguration.class,ApplicationConfig.class);
	    
	    // 注册spring mvc 的 servlet
	    Dynamic dynamic = servletContext.addServlet(SERVLET_NAME, new DispatcherServlet(webContext));
	    // 添加springMVC 允许访问的Controller后缀
	    //dynamic.addMapping("*.html", "*.ajax", "*.css", "*.js", "*.gif", "*.jpg", "*.png");
	    // 全部通过请用 “/”
	    dynamic.addMapping("*.do");
	    dynamic.setLoadOnStartup(1);
	    dynamic.setMultipartConfig(new MultipartConfigElement(null, MAX_FILE_UPLOAD_SIZE, MAX_REQUEST_SIZE, FILE_SIZE_THRESHOLD));
	  }
	
	  
	  *//**
	   * 通过自定义的配置类来实例化一个Web Application Context
	   * 
	   * @param annotatedClasses
	   * @return
	   *//*
	  private AnnotationConfigWebApplicationContext createWebContext(Class<?>... annotatedClasses) {
	    AnnotationConfigWebApplicationContext webContext = new AnnotationConfigWebApplicationContext();
	    webContext.register(annotatedClasses);
	 
	    return webContext;
	  }*/
}
