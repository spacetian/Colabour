package yayu.web.config;


import java.io.IOException;
import java.sql.SQLException;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.support.ResourcePatternResolver;
import org.springframework.core.io.support.ResourcePatternUtils;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import tk.mybatis.spring.mapper.MapperScannerConfigurer;
import yayu.core.data.IMapper;


@Configuration
@EnableTransactionManagement
@PropertySource({"classpath:jdbc.properties"})
public class MybatisConfig {
	@Bean
	public MapperScannerConfigurer mapperScannerConfigurer(@Value("${mybatis.mapper.base.package:*}") String basePackage) {
		MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();
		mapperScannerConfigurer.setMarkerInterface(IMapper.class);
		mapperScannerConfigurer.setSqlSessionTemplateBeanName("sqlSessionTemplate");
		mapperScannerConfigurer.setBasePackage(basePackage);
		return mapperScannerConfigurer;
	}
	@Bean
	public DataSource dataSource(@Value("${jdbc.driverClass}")  
	String driverClass,
	@Value("${jdbc.url}")  
	String url,
	@Value("${jdbc.username}")  
	String userName,
	@Value("${jdbc.password}")
	String password ) throws SQLException{
		DriverManagerDataSource dataSource=new DriverManagerDataSource();
		dataSource.setUrl(url);
		dataSource.setUsername(userName);
		dataSource.setPassword(password);
		dataSource.setDriverClassName(driverClass);
		return dataSource;
	}
	@Bean
	@Autowired
	public SqlSessionFactory sqlSessionFactory(DataSource dataSource, ResourceLoader resourceLoader, @Value("${mybatis.aliases.package:}") String aliases) throws Exception {
		SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
		
		sessionFactory.setDataSource(dataSource);
		sessionFactory.setTypeAliasesPackage(aliases);
		sessionFactory.setMapperLocations(getResources(resourceLoader, "classpath*:mapper/**/*.xml"));
		
		
		//分页插件
		Interceptor interPage=new com.github.pagehelper.PageHelper();
		Properties interPagePros=new Properties();
		interPagePros.setProperty("dialect", "mysql");
		interPagePros.setProperty("reasonable", "true");
		interPage.setProperties(interPagePros);
		
		Interceptor[] plugins={
				
				interPage
		};
		sessionFactory.setPlugins(plugins);
		return sessionFactory.getObject();
	}

	@Bean
	@Autowired
	SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) throws Exception {
		return new SqlSessionTemplate(sqlSessionFactory);
	}

	@Bean
	@Autowired
	PlatformTransactionManager transactionManager(DataSource dataSource) throws Exception {
		return new DataSourceTransactionManager(dataSource);
	}

	/**
	 * Method which loads resources by packagePath
	 * @param resourceLoader
	 * @param packagePath
	 * @return
	 * @throws IOException
	 */
	private Resource[] getResources(ResourceLoader resourceLoader, String packagePath) throws IOException {
		ResourcePatternResolver resourceResolver = ResourcePatternUtils
				.getResourcePatternResolver(resourceLoader);
		return resourceResolver.getResources(packagePath);
	}
}
